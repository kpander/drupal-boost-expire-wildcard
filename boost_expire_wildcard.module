<?php
/**
 * @file
 * Boost Expire Wildcard
 */

# this module exists because... wildcards don't work in conjunction with the 
# expires module and the boost_expire_cache hook.
#
# so we're providing a way to remove boost paths (and wildcards) automatically
#
# need to test whether NOT providing a wildcard will still glob multiple files!

# looked into this: http://drupal.org/node/1810936
# but the issue was the expires module wasn't even letting us get to boost,
# because it thought the url was invalid
#
# this avoids the url 'validation' and assumes we're entering in filepaths

/**
 * @file
 * Integration with the rules module
 */

/**
 * Implementation of hook_rules_action_info().
 *
 * @ingroup rules
 */
function boost_expire_wildcard_rules_action_info() {
  return array(
    'boost_expire_wildcard_flush_url' => array(
      'base' => 'boost_expire_wildcard_rules_action_flush_url',
      'label' => t('Clear wildcard Boost URL(s) from the page cache.'),
      'parameter' => array(
        'urls' => array(
          'type' => 'text',
          'label' => t('URL of page to clear'),
          'description' => t('Relative paths, wildcards allowed, e.g: design-team/*. One Per line.'),
        ),
      ),
      'group' => 'Expire',
    ),
  );
}

/**
 * Expire a set of URLs from the page cache, called from an Action.
 */
function boost_expire_wildcard_rules_action_flush_url($urls, $settings) {
  $urls = preg_replace("/\r\n/", "\n", $urls);
  $urls = explode("\n", $urls);

  boost_expire_wildcard_urls($urls);
}

/**
 * Expire a set of URLs.
 */
function boost_expire_wildcard_urls($urls) {
  $urls = array_map('trim', $urls);
  $urls = array_filter($urls);  // Remove empty lines.
  $urls_parsed = array_map('parse_url', $urls);

  // We assume these are relative paths.
  if (!$path = boost_expire_wildcard_get_folder()) {
    // Couldn't accurately determine the path to the statically cached Boost
    // html files. Therefore, don't continue with file deletion.
    return;
  }

  global $user;
  $debug = ($user->uid == 1) ? TRUE : FALSE;
  $debug = FALSE;

  if ($debug) {
    dpm($urls_parsed, 'urls_parsed');
  }

  foreach ($urls_parsed as $url) {
    if ($url['path'] === '<front>') {
      // If this is the <front> page, set $url = '_.html' so we only find the
      // single html file for the front page.
      $url['path'] = '_.html';
    }

    
    $has_wildcard = TRUE;
    if (strpos($url['path'], '*') === FALSE) {
      $has_wildcard = FALSE;
    }

    if (strpos($url['path'], '*') == strlen($url['path']) - 1) {
      $has_end_wildcard = TRUE;
    }
    else {
      // If there isn't a wildcard on the end of the path, add an html file
      // extension to ensure we only get files.
      $has_end_wildcard = FALSE;
      $url['path'] .= '_.html';
    }



    $files = array();

    if ($has_wildcard) {
      // If there is only 1 wildcard, and it's at the end of the path, we can
      // trash the entire folder.
      if (strpos($url['path'], '*') == strlen($url['path']) - 1) {
        $folder = $path . $url['path'];
        $folder = rtrim($folder, '*/');
        boost_expire_wildcard_trash_folder($folder);
      }
      else {
        $files = glob_recursive($path . $url['path']);
        if ($debug) {
          dpm($files, 'files from glob for ' . $path . $url['path']);
          dpm($files, "files for path [$path][{$url['path']}]");
        }
      }
    }
    else {
      $files = array($path . $url['path']);
    }

    if (!count($files)) {
      continue;
    }

    // Work backwards from the last to the first, so we affect subfolders
    // before parents.
    while (count($files)) {
      $file = array_pop($files);
      if ($debug && is_file($file)) {
        dpm("DELETE FILE [$file]");
      }
      if (file_exists($file) && is_file($file)) {
        unlink($file);
      }
    }
  }
}



/**
 * Get the full path to Boost's statically cached html files.
 *
 * @return string
 *   e.g., /var/www/docroot/cache/normal/my-domain.com/
 */
function boost_expire_wildcard_get_folder() {
  $path_items = array(DRUPAL_ROOT);
  $path_items[] = variable_get('boost_root_cache_dir', 'cache');
  $path_items[] = variable_get('boost_normal_dir', 'normal');

  // In validating the host name, we force numbers, letters and hyphens. 
  // We don't distinguish between underscores allowed in subdomains but not
  // host names. (This is quick and dirty...)
  $host = trim(preg_replace("/[^0-9a-zA-Z\-\._]+/", '', $_SERVER['HTTP_HOST']));
  if (empty($host)) {
    return FALSE;
  }
  $path_items[] = $host;

  return implode('/', $path_items) . '/';
}


// @see http://ca1.php.net/manual/en/function.glob.php#106595
if (!function_exists('glob_recursive')) {
  // Does not support flag GLOB_BRACE

  function glob_recursive($pattern, $flags = 0) {
    $files = glob($pattern, $flags);

    foreach (glob(dirname($pattern).'/*', GLOB_ONLYDIR|GLOB_NOSORT) as $dir) {
      $files = array_merge($files, glob_recursive($dir.'/'.basename($pattern), $flags));
    }

    return $files;
  }
}



/**
 * Remove all .html files from the given folder.
 *
 * Yeah, this is dangerous. The only limitation we have within the function
 * is that we only delete files ending in .html, and we add a rudimentary
 * check to confirm that it looks like the file is within a Boost folder.
 *
 * In a worst-case scenario, this shouldn't do any damage if the $path was 
 * given maliciously.
 */
function boost_expire_wildcard_trash_folder($path) {
  // Ensure the path has the Boost cache folder within it.
  $path_items = array(
    variable_get('boost_root_cache_dir', 'cache'),
    variable_get('boost_normal_dir', 'normal'),
  );
  if (!strpos($path, implode('/', $path_items))) {
    drupal_set_message("FAILED attempting to cleanup cached data files for a city. This situation should never occur -- investigate!", 'error');
    return;
  }

  if (!file_exists($path)) {
    return;
  }

  $directory = new RecursiveDirectoryIterator($path);
  foreach (new RecursiveIteratorIterator($directory) as $filename=>$current) {
    $file = $current->getFileName();
    if (preg_match("/\.html$/", $file)) {
      #dpm("delete cached boost subdir file: $filename");
      unlink($filename);
    }
  }
}
